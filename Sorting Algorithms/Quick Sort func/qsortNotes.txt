qsort() is a pre-defined standard function in the C library.
We can use this function to sort an array in ascending or descending order.
It internally uses the quick sort algorithm, hence the name qsort.
It can sort an array of any data type, including strings and structures.
It works well and is efficient to implement.

SYNTAX:

qsort(array, number, size, function);

array: The array to be sorted.
number: Size of the array or Number of elements in the array to sort.
size: Size of an individual element of the array.

function: Custom comparison function we need to write in a specified format:

int compare(const void *a, const void *b)  
{                                         
    //function body                
}

qsort() calls the compare() function for every two elements in the array (a and b).
Arguments a and b are two void pointers that point to the two elements to be compared.

We must write the body of compare() in such a way that it should return:
    0 if two elements are equal.
    -1 or any other negative integer(<0), if the first element is less than the second element in sorted array.
    1 or any other positive number(>0), if the first element is greater than the second element in sorted array.
    
The name of the comparing function can be anything.
Const void *a means a is a void pointer whose value is fixed. Before using, we need to typecast a void pointer to some data type.

For ascending order:
    int compare(const void *a, const void *b)  
    {                                         
        // typecasting from void pointer to int pointer
        const int *p1 = a;
        const int *p2 = b;
        return *p1 - *p2;
    }

    one liner:
    here we do not require to create any temporary variable.
    int compare(const void *a, const void *b)  
    {                                         
        return *(int *)a - *(int *)b;
    }
(int *)a: This part is a typecast. It converts the void pointer into a int pointer.
*(int *)a: Value at address "a".It will obtain the value at the memory location pointed to by "a".

Another way of doing the same:
    int *A = (int *)pA;
    int *B = (int *)pB;
    return *A - *B;
Value at address A - Value at address B.


Another way of doing the same:
    int A = *(int *)pA;
    int B = *(int *)pB;
    return A - B;

